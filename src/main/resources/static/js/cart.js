console.log('üõí Cart module loaded');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentCart = null;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isValidPhone(phone) {
    if (!phone) return false;
    
    const cleaned = phone.replace(/[\s\-\(\)]/g, '');
    const digitsOnly = cleaned.replace(/\D/g, '');
    
    if (digitsOnly.length === 11) {
        if (digitsOnly.startsWith('7') || digitsOnly.startsWith('8')) {
            const secondDigit = digitsOnly.charAt(1);
            return ['9', '4', '8'].includes(secondDigit);
        }
    }
    
    if (cleaned.startsWith('+')) {
        const internationalDigits = cleaned.substring(1).replace(/\D/g, '');
        return internationalDigits.length >= 10 && internationalDigits.length <= 15;
    }
    
    return false;
}

function formatPrice(price) {
    if (typeof price !== 'number') {
        price = parseFloat(price) || 0;
    }
    return price.toFixed(2);
}

function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
async function createCart() {
    const phoneInput = document.getElementById('userPhone');
    if (!phoneInput) {
        console.error('Phone input not found');
        return;
    }
    
    const phone = phoneInput.value.trim();
    console.log('Creating cart for phone:', phone);
    
    if (!isValidPhone(phone)) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79991234567)', 'error');
        phoneInput.focus();
        return;
    }

    try {
        console.log('Sending cart creation request...');
        
        const cart = await ApiClient.post(`/carts/add/${encodeURIComponent(phone)}`);
        console.log('Cart created successfully:', cart);
        
        currentCart = cart;
        
        // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        await loadCartByPhone(phone);
        NotificationManager.show('–ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        
    } catch (error) {
        console.error('Error creating cart:', error);
        
        let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã';
        if (error.message.includes('Failed to fetch')) {
            errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥.';
        } else if (error.message.includes('404')) {
            errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL API.';
        } else if (error.message.includes('500')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞.';
        } else if (error.message.includes('409')) {
            errorMessage = '–ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
            // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–µ
            await loadCartByPhone(phone);
        }
        
        NotificationManager.show(errorMessage, 'error');
    }
}

async function loadCartByPhone(phone) {
    console.log('Loading cart for phone:', phone);
    
    if (!isValidPhone(phone)) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    const container = document.getElementById('cartItems');
    if (!container) {
        console.error('Cart items container not found');
        return;
    }
    
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</div>';

    try {
        // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const cart = await ApiClient.get(`/carts/${encodeURIComponent(phone)}`);
        console.log('Cart loaded successfully:', cart);
        
        currentCart = cart;
        displayCartInfo(cart);
        displayCartItems(cart.items);
        
        NotificationManager.show('–ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
        
    } catch (error) {
        console.error('Error loading cart:', error);
        
        if (error.message.includes('404') || error.message.includes('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
            container.innerHTML = `
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart"></i>
                    <h3>–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É</p>
                    <button onclick="createCart()" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
                </div>
            `;
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            document.getElementById('cartInfo').classList.add('hidden');
        } else {
            container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã</div>';
            NotificationManager.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã', 'error');
        }
    }
}

function displayCartInfo(cart) {
    console.log('Displaying cart info:', cart);
    
    const cartInfo = document.getElementById('cartInfo');
    const cartIdElement = document.getElementById('cartId');
    const cartTotalElement = document.getElementById('cartTotal');
    
    if (!cartInfo || !cartIdElement || !cartTotalElement) {
        console.error('Cart HTML elements not found');
        return;
    }
    
    cartInfo.classList.remove('hidden');
    cartIdElement.textContent = cart.cartId || cart.id;
    cartTotalElement.textContent = formatPrice(cart.totalAmount);
    
    console.log('Cart info displayed successfully');
}

function displayCartItems(items) {
    const container = document.getElementById('cartItems');
    
    if (!items || items.length === 0) {
        container.innerHTML = `
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é</p>
            </div>
        `;
        return;
    }

    container.innerHTML = items.map(item => `
        <div class="cart-item" data-item-id="${item.cartItemId}">
            <div class="cart-item-info">
                <div class="cart-item-title">${escapeHtml(item.dishTitle)}</div>
                <div class="cart-item-meta">
                    <span class="price">${formatPrice(item.unitPrice)} ‚ÇΩ √ó ${item.count}</span>
                    <span class="total">–ò—Ç–æ–≥–æ: ${formatPrice(item.totalPrice)} ‚ÇΩ</span>
                </div>
            </div>
            <div class="cart-item-actions">
                <div class="quantity-controls">
                    <button class="quantity-btn" onclick="updateCartItemQuantity(${item.cartItemId}, ${item.count - 1})">
                        <i class="fas fa-minus"></i>
                    </button>
                    <span class="quantity">${item.count}</span>
                    <button class="quantity-btn" onclick="updateCartItemQuantity(${item.cartItemId}, ${item.count + 1})">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
                <button class="btn btn-danger btn-remove" onclick="removeCartItem(${item.cartItemId})">
                    <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
    
    console.log(`Displayed ${items.length} cart items`);
}

async function updateCartItemQuantity(cartItemId, newQuantity) {
    console.log(`Updating cart item ${cartItemId} quantity to ${newQuantity}`);
    
    if (newQuantity < 1) {
        await removeCartItem(cartItemId);
        return;
    }

    const phoneInput = document.getElementById('userPhone');
    if (!phoneInput) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    const phone = phoneInput.value.trim();
    if (!isValidPhone(phone)) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    try {
        const updateData = {
            phone: phone,
            cartItemId: cartItemId,
            count: newQuantity
        };

        console.log('Sending update request:', updateData);
        
        const response = await ApiClient.patch('/carts/items', updateData);
        
        NotificationManager.show('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        await loadCartByPhone(phone);
        
    } catch (error) {
        console.error('Error updating quantity:', error);
        NotificationManager.show(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

async function removeCartItem(cartItemId) {
    console.log(`Removing cart item: ${cartItemId}`);
    
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?')) {
        return;
    }

    const phoneInput = document.getElementById('userPhone');
    if (!phoneInput) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    const phone = phoneInput.value.trim();
    if (!isValidPhone(phone)) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    try {
        const deleteData = {
            phone: phone,
            cartItemId: cartItemId
        };

        console.log('Sending delete request:', deleteData);
        
        await ApiClient.delete('/carts/drop/items', deleteData);
        
        NotificationManager.show('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await loadCartByPhone(phone);
        
    } catch (error) {
        console.error('Error removing cart item:', error);
        NotificationManager.show(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

async function clearCart() {
    console.log('Clearing cart');
    
    if (!currentCart) {
        NotificationManager.show('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }

    if (!confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }

    const phoneInput = document.getElementById('userPhone');
    if (!phoneInput) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    const phone = phoneInput.value.trim();
    if (!isValidPhone(phone)) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    try {
        await ApiClient.delete(`/carts/drop/${encodeURIComponent(phone)}`);
        
        currentCart = null;
        document.getElementById('cartInfo').classList.add('hidden');
        document.getElementById('cartItems').innerHTML = `
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <h3>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é</p>
            </div>
        `;
        
        NotificationManager.show('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
        
    } catch (error) {
        console.error('Error clearing cart:', error);
        NotificationManager.show(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: ${error.message}`, 'error');
    }
}

async function createOrder() {
    console.log('Creating order from cart');
    
    if (!currentCart) {
        NotificationManager.show('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É', 'error');
        return;
    }

    const phoneInput = document.getElementById('userPhone');
    if (!phoneInput) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    const phone = phoneInput.value.trim();
    if (!isValidPhone(phone)) {
        NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }

    try {
        console.log('Creating order for phone:', phone);
        
        const order = await ApiClient.post(`/orders/add/${encodeURIComponent(phone)}`);
        
        NotificationManager.show('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
        
        // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        currentCart = null;
        document.getElementById('cartInfo').classList.add('hidden');
        document.getElementById('cartItems').innerHTML = `
            <div class="empty-cart">
                <i class="fas fa-check-circle"></i>
                <h3>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h3>
                <p>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${order.id}</p>
            </div>
        `;
        
        // –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º
        tabManager.switchTab('orders');
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã
        if (typeof loadOrders === 'function') {
            setTimeout(loadOrders, 500);
        }
        
    } catch (error) {
        console.error('Error creating order:', error);
        NotificationManager.show(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error.message}`, 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function initializeCartAutoLoad() {
    const phoneInput = document.getElementById('userPhone');
    if (phoneInput) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å debounce)
        let debounceTimer;
        phoneInput.addEventListener('input', function(e) {
            clearTimeout(debounceTimer);
            const phone = e.target.value.trim();
            
            if (isValidPhone(phone)) {
                debounceTimer = setTimeout(() => {
                    loadCartByPhone(phone);
                }, 1000);
            }
        });
        
        // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–æ—Ä–∑–∏–Ω—ã
        const cartTabBtn = document.querySelector('[data-tab="cart"]');
        if (cartTabBtn) {
            cartTabBtn.addEventListener('click', function() {
                const phone = phoneInput.value.trim();
                if (isValidPhone(phone)) {
                    loadCartByPhone(phone);
                }
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initializeCartEventHandlers() {
    console.log('Initializing cart event handlers...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    const createCartBtn = document.getElementById('createCartBtn');
    if (createCartBtn) {
        createCartBtn.addEventListener('click', createCart);
        console.log('‚úÖ Create cart button handler added');
    } else {
        console.error('‚ùå Create cart button not found');
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const loadCartBtn = document.getElementById('loadCartBtn');
    if (loadCartBtn) {
        loadCartBtn.addEventListener('click', function() {
            const phone = document.getElementById('userPhone').value.trim();
            if (isValidPhone(phone)) {
                loadCartByPhone(phone);
            } else {
                NotificationManager.show('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
            }
        });
        console.log('‚úÖ Load cart button handler added');
    }
    
    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const createOrderBtn = document.getElementById('createOrderBtn');
    if (createOrderBtn) {
        createOrderBtn.addEventListener('click', createOrder);
        console.log('‚úÖ Create order button handler added');
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const clearCartBtn = document.getElementById('clearCartBtn');
    if (clearCartBtn) {
        clearCartBtn.addEventListener('click', clearCart);
        console.log('‚úÖ Clear cart button handler added');
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const addToCartBtn = document.getElementById('addToCartBtn');
    if (addToCartBtn) {
        addToCartBtn.addEventListener('click', function() {
            if (typeof addToCart === 'function') {
                addToCart();
            }
        });
        console.log('‚úÖ Add to cart button handler added');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∏
    initializeCartAutoLoad();
}

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function debugPageElements() {
    console.log('=== –î–ï–ë–ê–ì –≠–õ–ï–ú–ï–ù–¢–û–í –°–¢–†–ê–ù–ò–¶–´ ===');

    const elements = {
        'userPhone': document.getElementById('userPhone'),
        'createCartBtn': document.getElementById('createCartBtn'),
        'loadCartBtn': document.getElementById('loadCartBtn'),
        'cartInfo': document.getElementById('cartInfo'),
        'createOrderBtn': document.getElementById('createOrderBtn'),
        'clearCartBtn': document.getElementById('clearCartBtn'),
        'addToCartBtn': document.getElementById('addToCartBtn')
    };

    for (const [name, element] of Object.entries(elements)) {
        if (element) {
            console.log(`‚úÖ ${name}: –ù–ê–ô–î–ï–ù`, element);
        } else {
            console.log(`‚ùå ${name}: –ù–ï –ù–ê–ô–î–ï–ù!`);
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
function addTestButton() {
    if (document.getElementById('testCartBtn')) return;
    
    const testBtn = document.createElement('button');
    testBtn.id = 'testCartBtn';
    testBtn.textContent = 'üîß –¢–ï–°–¢ –ö–û–†–ó–ò–ù–´';
    testBtn.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        background: red;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        z-index: 10000;
        cursor: pointer;
        font-size: 12px;
    `;
    testBtn.onclick = function() {
        console.log('üîß –¢–ï–°–¢–û–í–ê–Ø –ö–ù–û–ü–ö–ê –ù–ê–ñ–ê–¢–ê');
        const phone = document.getElementById('userPhone').value || '+79991234567';
        document.getElementById('userPhone').value = phone;
        loadCartByPhone(phone);
    };
    document.body.appendChild(testBtn);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
function initializeCartWithDebug() {
    console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø CART –° –û–¢–õ–ê–î–ö–û–ô ===');

    debugPageElements();
    initializeCartEventHandlers();
    addTestButton();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –ó–ê–ì–†–£–ñ–ï–ù, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º cart...');
    setTimeout(initializeCartWithDebug, 100);
});

// –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(initializeCartWithDebug, 100);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.createCart = createCart;
window.loadCartByPhone = loadCartByPhone;
window.updateCartItemQuantity = updateCartItemQuantity;
window.removeCartItem = removeCartItem;
window.clearCart = clearCart;
window.createOrder = createOrder;

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.loadCart = loadCartByPhone;

console.log('‚úÖ Cart module fully initialized');